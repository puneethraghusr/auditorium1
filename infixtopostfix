#include<stdio.h> 
#include<stdlib.h> 
#include<ctype.h> 
#include<string.h> 
#define SIZE 100 

 
char stack[SIZE]; 
int top = -1; 


void push(char c); 
char pop(); 
int isoperator(char symbol); 
int precedence(char symbol); 
void InfixToPostfix(char infix_exp[], char postfix_exp[]); 


int main() 
{ 
 
char infix[SIZE], postfix[SIZE]; 
printf("\n\n Enter Infix expression : "); 
scanf("%s",infix); 
 
InfixToPostfix(infix,postfix); 
printf("\n Postfix Expression: "); 

puts(postfix); 
} 

void InfixToPostfix(char infix_exp[], char postfix_exp[]) 
{ 
int i, j; 
char item, x; 
 
push('('); 

strcat(infix_exp,")"); 
i=0; 
j=0; 

item=infix_exp[i]; 
 
while(item != '\0') 
{ 
if(item == '(') 
{ 
push(item); 
} 
else if( isdigit(item) || isalpha(item)) 
{ 

postfix_exp[j] = item; 
j++; 
} 
else if(isoperator(item) == 1) 
{ 

x=pop(); 
while(isoperator(x) == 1 && precedence(x)>= precedence(item)) 
{ 
postfix_exp[j] = x; 
j++; 
x = pop(); 
} 

push(x); 

push(item); 
} 

else if(item == ')') 
{ 
x = pop(); 
while(x != '(') 
{ 
postfix_exp[j] = x; 
j++; 
x = pop(); 
} 
} 
else 
{ 
printf("\nInvalid infix Expression.\n"); 
break; 
} 
i++; 
item = infix_exp[i]; 
} 
if(top > 0) 
printf("\n Invalid infix Expression."); 
postfix_exp[j] = '\0'; 
} 

void push(char c) 
{ 
if(top >= SIZE-1) 
printf("\n Stack Overflow."); 
else 
{ 
top++; 
stack[top] = c; 
} 
} 
char pop() 
{ 
char c; 
c='\0'; 
if(top < 0) 
printf("\n Stack Underflow."); 
else 
{ 
c = stack[top]; 
top--; 
} 
return c; 
} 

int isoperator(char symbol) 
{ 
if(symbol == '^' || symbol == '*' || symbol == '/' || symbol == '+' || symbol == '-') 
return 1; 
else 
return 0; 
} 
int precedence(char symbol) 
{ 
if(symbol == '^') 
return(5); 
else if(symbol == '/') 
return(4); 
else if(symbol == '*') 
return(3); 
else if(symbol == '+') 
return(2); 
else if(symbol == '-') 
return(1); 
else 
return(0); 
}
